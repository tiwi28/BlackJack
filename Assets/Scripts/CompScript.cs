using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using Unity.Mathematics;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.Analytics;
public class CompScript : MonoBehaviour
{
 public List<Sprite> cardSprites;          // Sprites for cards 1â€“10
    public GameObject cardPrefab;             // Drag a prefab with a SpriteRenderer
    public Transform compSpawnPoint;              // Where the first card is spawned

    public Sprite cardBackSprite;           //Sprite for the flipped card
    public float spacing = 2.5f; // Space between cards

    public int cardCount = 0; //CPU card count



    public List<int> CPUCardValues = new List<int>(); //List of CPU card values

    public int x; //Placeholder variable to store a random number generated by the method RNG()
    public User user; //Import

    public bool isFlipped; //Returns true if a CPU card is flipped, hiding its value from the user
    
    private List<GameObject> CPUSpawnedCards = new List<GameObject>(); //List of the spawned CPU cards


    // Start is called before the first frame update
    void Start()
    {

        //Spawns the 2 starting CPU cards
        int cpuCard1 = RNG();
        int cpuCard2 = RNG();

        SpawnCPUCard(cpuCard1);
        SpawnCPUCard(cpuCard2);
                
       
        }

    // Update is called once per frame
    void Update()
    {
        //Tracks the total card value of the cpu cards
        getCPUTotal();
        
    }

    //Returns the total card value of the cpu cards
    public int getCPUTotal(){
        return CPUCardValues.Sum();
    }

    void FixedUpdate()
    {

        //If the user hits and the cpu's total card value is less than 16, a new card is spawned in
        if(Input.GetKeyDown(KeyCode.H) && getCPUTotal() < 16){
            x = RNG();
            SpawnCPUCard(x);
        }

        

   

    }

 //This will reveal the card that was flipped 
    public void FlipCard(){
        CPUSpawnedCards[0].GetComponent<SpriteRenderer>().sprite = cardSprites[CPUCardValues[0] - 1];
        isFlipped = true;
    }

    /*Generates a random number, returns random integer between 1 and 10
    */
    private int RNG(){
    int randomNumber = UnityEngine.Random.Range(1,12);

    if(randomNumber == 11){
           int x =  UnityEngine.Random.Range(0,3);
            randomNumber+=x;
            CPUCardValues.Add(10);
        }
    
    else{
        CPUCardValues.Add(randomNumber);
        }

    
    return randomNumber;
    }

//Resets CPU cards after a round
public void ResetCPU()
{
    foreach (GameObject card in CPUSpawnedCards)
    {
        Destroy(card);
    }
    CPUSpawnedCards.Clear();
    CPUCardValues.Clear();
    cardCount = 0;

    Start();
}


//Spawns a CPU card when called
  void SpawnCPUCard(int cardValue)
    {        
      if (cardCount < 21){
        Vector3 spawnPos = compSpawnPoint.position + new Vector3(spacing * cardCount, 0, 0);
        GameObject newCard = Instantiate(cardPrefab, spawnPos, Quaternion.identity);

        // If it's the first card, make it face down
        if (cardCount == 0){
            newCard.GetComponent<SpriteRenderer>().sprite = cardBackSprite;
            isFlipped = false;
        }
        else{
            newCard.GetComponent<SpriteRenderer>().sprite = cardSprites[cardValue - 1];
        }

        CPUSpawnedCards.Add(newCard);
        cardCount += 1;
    }

    }


}
