using System;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using System.Security.Cryptography;
using Unity.Mathematics;
using UnityEngine;
using System.Linq;
using UnityEditor;

public class User : MonoBehaviour
{
 public List<Sprite> cardSprites;          // Sprites for cards 1â€“10
public  GameObject cardPrefab;             // Drag a prefab with a SpriteRenderer
    public Transform userSpawnPoint;              // Where the first card is spawned
    public float spacing = 2.5f; // Space between cards

    int cardCount = 0; //Count of total cards from the user

    public TMP_Text scoreDisplay; //Text for score display
    public TMP_Text stayOrHit;     //Text pop-up top direct the user on what button to click on to stay or bust

    public TMP_Text winLoseMessage; //Congratulates/Consoles the user if they win/lose the round
    public List<int> userCardValues = new List<int>(); //Stores the random user card values generated by the RNG() method

    public CompScript cpu;      //CPU object to access its attributes (specifically its card values)

private List<GameObject> userSpawnedCards = new List<GameObject>();         //Tracks the cards the user spawns in during a round
    public int userWins = 0; // Number of user wins
    public int cpuWins = 0; //Number of CPU (Computer) wins


    public int userTotal; //The total value of all the user's card values added together
    public int CPUTotal; //The total value of all the CPU's card values added together
    void Start()
    {
        //Generate the 2 starting cards
       int startCard1 = RNG();
       int startCard2 = RNG();

       SpawnCard(startCard1);
       SpawnCard(startCard2);
        }

    // Update is called once per frame
    void Update()
    {
        //Track the total card values
        CPUTotal = cpu.getCPUTotal();
        userTotal = userCardValues.Sum();

        //Dispaly scores (based on the number of wins)
        scoreDisplay.text = $"CPU: {cpuWins}  |  You: {userWins}";

         //Determines if the user stays or hits (S to stay, and H to Hit)
        if (cardCount >= 2){

            if (Input.GetKeyDown(KeyCode.S)){
                stayOrHit.text = "You chose to stay!";
                cpu.FlipCard();

            //If the user stays, it checks to see who won that round
                if(didUserWin()){
                    winLoseMessage.text = "You Win, Click 'R' to reset and play again"; //Displays a win message
                    userWins+=1; //Updates user wins 
                }

                else{
                    winLoseMessage.text = "You Lose, Click 'R' to reset and play again"; //Displays a loss message
                    cpuWins+=1; //Updates CPU wins
                }        
            }
            
            //If the user hits, they have a message displayed
            else if (Input.GetKeyDown(KeyCode.H)){
                stayOrHit.text = "Click 'H' to hit or 'S' to stay";
            }

        }


        if(Input.GetKeyDown(KeyCode.R)){
            ResetGame();
           }
      
    }


    //Resets the entire game, starting a new round.
    private void ResetGame()
    {
        // Destroy all card GameObjects
    foreach (GameObject card in userSpawnedCards)
    {
        Destroy(card);
    }
    userSpawnedCards.Clear(); // Clear the list

    // Reset card data
    cardCount = 0;
    userCardValues.Clear();
    userTotal = 0;
    CPUTotal = 0;

    // Reset UI
    stayOrHit.text = "Click 'H' to hit or 'S' to stay";
    winLoseMessage.text = "";

    // CPU Reset
    cpu.ResetCPU();

    // Deal two new starting cards to User
    SpawnCard(RNG());
    SpawnCard(RNG());
    }

    void FixedUpdate()
    {
          //Spawns a new card when user Hits
        if(Input.GetKeyDown(KeyCode.H) && cardCount < 21){
            int value = RNG();
            SpawnCard(value);
         }        
        
    }

    //Checks for win conditions, decides if user wins or loses when called
    bool didUserWin(){  

        if ((CPUTotal < userTotal && userTotal < 21) || userTotal == 21){
            return true;
        }

        else if(userTotal > 21){
            return false;
        }
        
        return false;        
    }

    /*Generates a random number, returns random integer between 1 and 10
    */
    private int RNG(){
    int randomNumber = UnityEngine.Random.Range(1,12);

    if(randomNumber == 11){
           int x =  UnityEngine.Random.Range(0,3);
            randomNumber+=x;
             userCardValues.Add(10);
        }

    else{
        userCardValues.Add(randomNumber);
    }

   

    return randomNumber;
    }


//Spawns a card for the user when called
  void SpawnCard(int cardValue)
    {        
               
            Vector3 spawnPos = userSpawnPoint.position + new Vector3(spacing * cardCount, -7.25f, 0);
            GameObject newCard = Instantiate(cardPrefab, spawnPos, Quaternion.identity);
            newCard.GetComponent<SpriteRenderer>().sprite = cardSprites[cardValue - 1];
            userSpawnedCards.Add(newCard);
            cardCount++;

       
        
    }
}
